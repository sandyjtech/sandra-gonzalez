{"ast":null,"code":"var _jsxFileName = \"/home/sandyjtech/Development/my-projects/sandra-gonzalez/src/pages/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blogs = () => {\n  _s();\n  // Sample blog data (you can replace this with your actual blog data)\n  const blogs = [{\n    id: 1,\n    title: 'Blog Title 1',\n    content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit...'\n  }, {\n    id: 2,\n    title: 'Blog Title 2',\n    content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit...'\n  }\n  // Add more blog entries here\n  ];\n\n  // State for managing comments\n  const [comments, setComments] = useState([]);\n\n  // Function to add a new comment\n  const addComment = (blogId, commentText) => {\n    // Create a new comment object\n    const newComment = {\n      id: Math.random(),\n      // You can generate a unique ID using a library or a backend service later\n      blogId,\n      text: commentText\n    };\n\n    // Add the new comment to the comments array\n    setComments([...comments, newComment]);\n  };\n\n  // Function to delete a comment\n  const deleteComment = commentId => {\n    // Filter out the comment with the given ID\n    const updatedComments = comments.filter(comment => comment.id !== commentId);\n\n    // Update the comments state\n    setComments(updatedComments);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: blogs.map(blog => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: blog.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: blog.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: comments.filter(comment => comment.blogId === blog.id).map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [comment.text, /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteComment(comment.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 21\n            }, this)]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: e => {\n            e.preventDefault();\n            const commentText = e.target.commentText.value;\n            addComment(blog.id, commentText);\n            e.target.commentText.value = ''; // Clear the input field\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"commentText\",\n            placeholder: \"Add a comment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, blog.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Blogs, \"RHrI29Yaf4wTXaDPqg0VDGN+Yyo=\");\n_c = Blogs;\nexport default Blogs;\nvar _c;\n$RefreshReg$(_c, \"Blogs\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Blogs","_s","blogs","id","title","content","comments","setComments","addComment","blogId","commentText","newComment","Math","random","text","deleteComment","commentId","updatedComments","filter","comment","children","map","blog","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","e","preventDefault","target","value","type","name","placeholder","_c","$RefreshReg$"],"sources":["/home/sandyjtech/Development/my-projects/sandra-gonzalez/src/pages/Blogs/Blogs.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst Blogs = () => {\n  // Sample blog data (you can replace this with your actual blog data)\n  const blogs = [\n    {\n      id: 1,\n      title: 'Blog Title 1',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit...',\n    },\n    {\n      id: 2,\n      title: 'Blog Title 2',\n      content: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit...',\n    },\n    // Add more blog entries here\n  ];\n\n  // State for managing comments\n  const [comments, setComments] = useState([]);\n\n  // Function to add a new comment\n  const addComment = (blogId, commentText) => {\n    // Create a new comment object\n    const newComment = {\n      id: Math.random(), // You can generate a unique ID using a library or a backend service later\n      blogId,\n      text: commentText,\n    };\n\n    // Add the new comment to the comments array\n    setComments([...comments, newComment]);\n  };\n\n  // Function to delete a comment\n  const deleteComment = (commentId) => {\n    // Filter out the comment with the given ID\n    const updatedComments = comments.filter((comment) => comment.id !== commentId);\n\n    // Update the comments state\n    setComments(updatedComments);\n  };\n\n  return (\n    <div>\n      {blogs.map((blog) => (\n        <div key={blog.id}>\n          <h2>{blog.title}</h2>\n          <p>{blog.content}</p>\n\n          {/* Comment section */}\n          <div>\n            <h3>Comments</h3>\n            <ul>\n              {comments\n                .filter((comment) => comment.blogId === blog.id)\n                .map((comment) => (\n                  <li key={comment.id}>\n                    {comment.text}\n                    <button onClick={() => deleteComment(comment.id)}>Delete</button>\n                  </li>\n                ))}\n            </ul>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                const commentText = e.target.commentText.value;\n                addComment(blog.id, commentText);\n                e.target.commentText.value = ''; // Clear the input field\n              }}\n            >\n              <input type=\"text\" name=\"commentText\" placeholder=\"Add a comment\" />\n              <button type=\"submit\">Post</button>\n            </form>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Blogs;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}